# -*- coding: utf-8 -*-
"""Swing trading with multiple timeframe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_wKg6X90BKrKpPq-TSRi_GuAy-ict3k2
"""

from AlgoAPI import AlgoAPIUtil, AlgoAPI_Backtest
from datetime import datetime, timedelta
import talib, numpy

class AlgoEvent:
    def __init__(self):
        self.lasttradetime = datetime(2000,1,1)
        self.lastTradeTime = {}
        self.dictClose = {}
        self.dictWeekMA = {}
        self.dictDayMA = {}
        self.weekPeriod = 7
        self.dayPeriod = 1
        self.stickAmount = 20 #20 candlesticks
    def start(self, mEvt):
        self.myinstrument = mEvt['subscribeList'] #In case of subscribing to multiple CFDs
        for instru in self.myinstrument:
            self.dictClose[instru] = numpy.array([])
            self.lastTradeTime[instru] = datetime(2000,1,1)
            self.dictWeekMA[instru] = numpy.array([])
            self.dictDayMA[instru] = numpy.array([])
        self.evt = AlgoAPI_Backtest.AlgoEvtHandler(self, mEvt)
        self.evt.start()

    def on_bulkdatafeed(self, isSync, bd, ab):
        for instru in self.myinstrument:
            if bd[instru]['timestamp'] >= self.lasttradetime + timedelta(hours=24) :
                self.dictClose[instru] = numpy.append(self.dictClose[instru], bd[instru]['lastPrice'])
                self.lasttradetime = bd[instru]['timestamp']
                lastprice = bd[instru]['lastPrice']
                self.lastTradeTime[instru]= bd[instru]['timestamp']
                self.dictClose[instru] = numpy.append(self.dictClose[instru],lastprice)
                # keep the most recent observations
                if len(self.dictClose[instru]) > int(self.weekPeriod + self.dayPeriod) * self.stickAmount:
                    self.dictClose[instru] = self.dictClose[instru][-int(self.weekPeriod + self.dayPeriod)*self.stickAmount:]
                # fit SMA line
                self.dictWeekMA[instru] = talib.SMA(self.dictClose[instru], timeperiod=int(self.weekPeriod*self.stickAmount))
                self.dictDayMA[instru] = talib.SMA(self.dictClose[instru], timeperiod=int(self.dayPeriod*self.stickAmount))
                if not (numpy.isnan(self.dictWeekMA[instru][-1]) or numpy.isnan(self.dictWeekMA[instru][-2]) or numpy.isnan(self.dictDayMA[instru][-1]) or numpy.isnan(self.dictDayMA[instru][-2])):
                    #bullish trade : weekly SMA positive, daily SMA negative => buy stop order on swing high above daily SMA
                    if (self.dictWeekMA[instru][-1] > self.dictWeekMA[instru][-2] and self.dictDayMA[instru][-1] < self.dictDayMA[instru][-2] and self.dictClose[instru][-1] <self.dictDayMA[instru][-1]):
                            self.test_sendOrder(lastprice,1,'open',instru)
                    #bearish trade : weekly SMA negative, daily SMA positive => sell stop order on swing slow below daily SMA
                    if (self.dictWeekMA[instru][-1] < self.dictWeekMA[instru][-2] and self.dictDayMA[instru][-1] > self.dictDayMA[instru][-2] and self.dictClose[instru][-1] > self.dictDayMA[instru][-1]):
                            self.test_sendOrder(lastprice,-1,'open',instru)
    
    def on_marketdatafeed(self, md, ab):
        pass

    def on_orderfeed(self, of):
        pass

    def on_dailyPLfeed(self, pl):
        pass

    def on_openPositionfeed(self, op, oo, uo):
        pass

    def test_sendOrder(self, lastprice, buysell, openclose,instru):
        self.evt.consoleLog(instru, " : ", lastprice)
        if buysell == 1:
            self.evt.consoleLog("buy")
        else:
            self.evt.consoleLog("sell")
        orderObj = AlgoAPIUtil.OrderObject()
        orderObj.instrument = instru
        orderObj.orderRef = 1
        if buysell==1:
            orderObj.takeProfitLevel = lastprice*1.1
            orderObj.stopLossLevel = lastprice*0.9
        elif buysell==-1:
            orderObj.takeProfitLevel = lastprice*0.9
            orderObj.stopLossLevel = lastprice*1.1
        orderObj.volume = 0.01
        orderObj.openclose = openclose
        orderObj.buysell = buysell
        orderObj.ordertype = 0 #0=market_order, 1=limit_order
        self.evt.sendOrder(orderObj)